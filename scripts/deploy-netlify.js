#!/usr/bin/env node

/**
 * Script de d√©ploiement automatis√© sur Netlify
 * Usage: npm run deploy:staging
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const SITE_NAME = 'voicecoop-staging';
const BUILD_DIR = '.next';

console.log('üöÄ D√©ploiement VoiceCoop sur Netlify...\n');

// √âtape 1: V√©rifications pr√©alables
console.log('1Ô∏è‚É£ V√©rifications pr√©alables...');

// V√©rifier que Netlify CLI est install√©
try {
  execSync('netlify --version', { stdio: 'pipe' });
  console.log('‚úÖ Netlify CLI d√©tect√©');
} catch (error) {
  console.log('‚ùå Netlify CLI non trouv√©. Installation...');
  try {
    execSync('npm install -g netlify-cli', { stdio: 'inherit' });
    console.log('‚úÖ Netlify CLI install√©');
  } catch (installError) {
    console.error('‚ùå Impossible d\'installer Netlify CLI:', installError.message);
    process.exit(1);
  }
}

// V√©rifier l'authentification Netlify
try {
  execSync('netlify status', { stdio: 'pipe' });
  console.log('‚úÖ Authentifi√© sur Netlify');
} catch (error) {
  console.log('‚ö†Ô∏è  Non authentifi√© sur Netlify. Lancement de l\'authentification...');
  try {
    execSync('netlify login', { stdio: 'inherit' });
    console.log('‚úÖ Authentification r√©ussie');
  } catch (authError) {
    console.error('‚ùå √âchec de l\'authentification Netlify');
    process.exit(1);
  }
}

// √âtape 2: Build de l'application
console.log('\n2Ô∏è‚É£ Build de l\'application...');
try {
  execSync('npm run build', { stdio: 'inherit' });
  console.log('‚úÖ Build r√©ussi');
} catch (error) {
  console.error('‚ùå √âchec du build:', error.message);
  process.exit(1);
}

// √âtape 3: Tests rapides
console.log('\n3Ô∏è‚É£ Tests rapides...');
try {
  execSync('npm run lint', { stdio: 'pipe' });
  console.log('‚úÖ Linting r√©ussi');
} catch (error) {
  console.log('‚ö†Ô∏è  Warnings ESLint d√©tect√©s (non bloquant)');
}

// √âtape 4: D√©ploiement
console.log('\n4Ô∏è‚É£ D√©ploiement sur Netlify...');

try {
  // V√©rifier si le site existe
  let siteExists = false;
  try {
    execSync(`netlify sites:list | grep ${SITE_NAME}`, { stdio: 'pipe' });
    siteExists = true;
    console.log(`‚úÖ Site ${SITE_NAME} trouv√©`);
  } catch (error) {
    console.log(`‚ö†Ô∏è  Site ${SITE_NAME} non trouv√©, cr√©ation...`);
  }

  // Cr√©er le site si n√©cessaire
  if (!siteExists) {
    try {
      execSync(`netlify sites:create --name ${SITE_NAME}`, { stdio: 'inherit' });
      console.log(`‚úÖ Site ${SITE_NAME} cr√©√©`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de cr√©er le site automatiquement');
      console.log('üìù Cr√©ez le site manuellement sur https://app.netlify.com');
    }
  }

  // D√©ploiement
  console.log('üöÄ D√©ploiement en cours...');
  execSync('netlify deploy --prod --dir=.next', { stdio: 'inherit' });
  
  console.log('\nüéâ D√©ploiement r√©ussi !');
  
  // Afficher les informations du site
  try {
    const siteInfo = execSync('netlify status', { encoding: 'utf8' });
    console.log('\nüìä Informations du site:');
    console.log(siteInfo);
  } catch (error) {
    console.log('‚ö†Ô∏è  Impossible de r√©cup√©rer les informations du site');
  }

} catch (error) {
  console.error('‚ùå √âchec du d√©ploiement:', error.message);
  console.log('\nüîß Solutions possibles:');
  console.log('1. V√©rifiez votre authentification: netlify login');
  console.log('2. Cr√©ez le site manuellement: netlify sites:create');
  console.log('3. V√©rifiez les variables d\'environnement sur Netlify');
  process.exit(1);
}

// √âtape 5: Tests post-d√©ploiement
console.log('\n5Ô∏è‚É£ Tests post-d√©ploiement...');
try {
  const siteUrl = execSync('netlify status --json', { encoding: 'utf8' });
  const siteData = JSON.parse(siteUrl);
  const url = siteData.site?.url || `https://${SITE_NAME}.netlify.app`;
  
  console.log(`üåê Site d√©ploy√© sur: ${url}`);
  console.log('üîç Test de connectivit√©...');
  
  // Test simple de connectivit√© (optionnel)
  try {
    const { default: fetch } = await import('node-fetch');
    const response = await fetch(`${url}/api/health`);
    if (response.ok) {
      console.log('‚úÖ API Health check r√©ussi');
    } else {
      console.log('‚ö†Ô∏è  API Health check √©chou√© (normal si pas encore configur√©)');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Test de connectivit√© √©chou√© (normal pour le premier d√©ploiement)');
  }

} catch (error) {
  console.log('‚ö†Ô∏è  Impossible de tester le d√©ploiement');
}

console.log('\nüéä D√©ploiement staging termin√© !');
console.log('\nüìã Prochaines √©tapes:');
console.log('1. Configurez les variables d\'environnement sur Netlify');
console.log('2. Testez l\'application sur l\'URL fournie');
console.log('3. Configurez le domaine personnalis√© si n√©cessaire');
console.log('4. Pr√©parez le d√©ploiement production sur Elest.io');

export default { SITE_NAME, BUILD_DIR };
