#!/usr/bin/env node

/**
 * Script Principal - Tests d'Int√©gration Supabase Cloud
 * Ex√©cute tous les tests d'int√©gration Supabase de mani√®re s√©quentielle
 */

import { runAuthTests } from './test-supabase-auth.js';
import { runCRUDTests } from './test-supabase-crud.js';
import { runAPITests } from './test-nextjs-apis.js';
import { runPerformanceSecurityTests } from './test-performance-security.js';

/**
 * V√©rification des pr√©requis
 */
async function checkPrerequisites() {
    console.log('üîç V√©rification des pr√©requis...');
    
    const requiredEnvVars = [
        'NEXT_PUBLIC_SUPABASE_URL',
        'NEXT_PUBLIC_SUPABASE_ANON_KEY',
        'SUPABASE_SERVICE_ROLE_KEY'
    ];
    
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missingVars.length > 0) {
        console.error('‚ùå Variables d\'environnement manquantes:');
        missingVars.forEach(varName => {
            console.error(`  - ${varName}`);
        });
        console.error('\nV√©rifiez votre fichier .env.local');
        return false;
    }
    
    console.log('‚úÖ Toutes les variables d\'environnement sont pr√©sentes');
    
    // V√©rifier la connectivit√© Supabase
    try {
        const { createClient } = await import('@supabase/supabase-js');
        const supabase = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL,
            process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
        );
        
        const { data, error } = await supabase
            .from('user_profiles')
            .select('count', { count: 'exact', head: true });
        
        if (error) {
            console.error('‚ùå Impossible de se connecter √† Supabase:', error.message);
            return false;
        }
        
        console.log('‚úÖ Connexion Supabase valid√©e');
        return true;
    } catch (error) {
        console.error('‚ùå Erreur de connexion Supabase:', error.message);
        return false;
    }
}

/**
 * V√©rification que l'application Next.js est d√©marr√©e
 */
async function checkNextJSApp() {
    console.log('üåê V√©rification de l\'application Next.js...');
    
    try {
        const axios = (await import('axios')).default;
        const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
        
        const response = await axios.get(`${baseUrl}/api/health`, {
            timeout: 5000
        });
        
        if (response.status === 200) {
            console.log('‚úÖ Application Next.js accessible');
            return true;
        } else {
            console.error('‚ùå Application Next.js non accessible');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Application Next.js non d√©marr√©e ou inaccessible');
        console.error('üí° Assurez-vous que l\'application est d√©marr√©e avec: npm run dev');
        return false;
    }
}

/**
 * Fonction principale d'ex√©cution des tests
 */
async function runAllSupabaseTests() {
    console.log('üöÄ Tests d\'Int√©gration Supabase Cloud - Suite Compl√®te');
    console.log('======================================================\n');
    
    const startTime = Date.now();
    
    // V√©rification des pr√©requis
    const prerequisitesOk = await checkPrerequisites();
    if (!prerequisitesOk) {
        console.error('\nüí• Pr√©requis non satisfaits. Arr√™t des tests.');
        process.exit(1);
    }
    
    // V√©rification de l'application Next.js
    const nextJSOk = await checkNextJSApp();
    if (!nextJSOk) {
        console.error('\nüí• Application Next.js non accessible. Arr√™t des tests.');
        process.exit(1);
    }
    
    console.log('\nüéØ D√©but des tests d\'int√©gration...\n');
    
    const testResults = {
        auth: { success: false, duration: 0 },
        crud: { success: false, duration: 0 },
        apis: { success: false, duration: 0 },
        performance: { success: false, duration: 0 }
    };
    
    // 1. Tests d'authentification
    console.log('üìç Phase 1/4: Tests d\'Authentification');
    console.log('=====================================');
    try {
        const authStart = Date.now();
        testResults.auth.success = await runAuthTests();
        testResults.auth.duration = Date.now() - authStart;
    } catch (error) {
        console.error('üí• Erreur tests authentification:', error.message);
        testResults.auth.success = false;
    }
    
    // 2. Tests CRUD
    console.log('\nüìç Phase 2/4: Tests CRUD Base de Donn√©es');
    console.log('========================================');
    try {
        const crudStart = Date.now();
        testResults.crud.success = await runCRUDTests();
        testResults.crud.duration = Date.now() - crudStart;
    } catch (error) {
        console.error('üí• Erreur tests CRUD:', error.message);
        testResults.crud.success = false;
    }
    
    // 3. Tests APIs Next.js
    console.log('\nüìç Phase 3/4: Tests APIs Next.js');
    console.log('=================================');
    try {
        const apisStart = Date.now();
        testResults.apis.success = await runAPITests();
        testResults.apis.duration = Date.now() - apisStart;
    } catch (error) {
        console.error('üí• Erreur tests APIs:', error.message);
        testResults.apis.success = false;
    }
    
    // 4. Tests Performance et S√©curit√©
    console.log('\nüìç Phase 4/4: Tests Performance et S√©curit√©');
    console.log('============================================');
    try {
        const perfStart = Date.now();
        testResults.performance.success = await runPerformanceSecurityTests();
        testResults.performance.duration = Date.now() - perfStart;
    } catch (error) {
        console.error('üí• Erreur tests performance:', error.message);
        testResults.performance.success = false;
    }
    
    // Rapport final d√©taill√©
    const totalDuration = Date.now() - startTime;
    
    console.log('\nüéä RAPPORT FINAL - Tests d\'Int√©gration Supabase Cloud');
    console.log('=====================================================');
    
    console.log('\nüìä R√©sultats par Phase:');
    console.log(`üîê Authentification: ${testResults.auth.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'} (${testResults.auth.duration}ms)`);
    console.log(`üóÑÔ∏è CRUD Base de Donn√©es: ${testResults.crud.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'} (${testResults.crud.duration}ms)`);
    console.log(`üåê APIs Next.js: ${testResults.apis.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'} (${testResults.apis.duration}ms)`);
    console.log(`üîí Performance & S√©curit√©: ${testResults.performance.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'} (${testResults.performance.duration}ms)`);
    
    const successCount = Object.values(testResults).filter(r => r.success).length;
    const totalTests = Object.keys(testResults).length;
    const successRate = Math.round((successCount / totalTests) * 100);
    
    console.log('\nüéØ R√©sum√© Global:');
    console.log(`üìà Taux de r√©ussite: ${successCount}/${totalTests} (${successRate}%)`);
    console.log(`‚è±Ô∏è Dur√©e totale: ${Math.round(totalDuration / 1000)}s`);
    
    if (successCount === totalTests) {
        console.log('\nüéâ F√âLICITATIONS ! Tous les tests d\'int√©gration Supabase sont r√©ussis !');
        console.log('üöÄ Votre configuration Supabase Cloud est parfaitement op√©rationnelle !');
        console.log('‚ú® Vous pouvez maintenant passer aux tests E2E ou au d√©ploiement !');
        return true;
    } else if (successCount >= totalTests * 0.75) {
        console.log('\nüéä EXCELLENT ! La majorit√© des tests sont r√©ussis !');
        console.log('‚ö†Ô∏è Quelques ajustements mineurs peuvent √™tre n√©cessaires.');
        console.log('üîß Consultez les d√©tails ci-dessus pour les am√©liorations.');
        return true;
    } else {
        console.log('\n‚ö†Ô∏è ATTENTION ! Plusieurs tests ont √©chou√©.');
        console.log('üîß V√©rifiez la configuration Supabase et les variables d\'environnement.');
        console.log('üìö Consultez la documentation pour r√©soudre les probl√®mes.');
        return false;
    }
}

/**
 * Gestion des arguments de ligne de commande
 */
function parseArguments() {
    const args = process.argv.slice(2);
    const options = {
        verbose: args.includes('--verbose') || args.includes('-v'),
        skipPrereqs: args.includes('--skip-prereqs'),
        testOnly: null
    };
    
    const testOnlyIndex = args.findIndex(arg => arg === '--test-only');
    if (testOnlyIndex !== -1 && args[testOnlyIndex + 1]) {
        options.testOnly = args[testOnlyIndex + 1];
    }
    
    return options;
}

/**
 * Affichage de l'aide
 */
function showHelp() {
    console.log('üöÄ Tests d\'Int√©gration Supabase Cloud');
    console.log('=====================================\n');
    console.log('Usage: node run-supabase-integration-tests.js [options]\n');
    console.log('Options:');
    console.log('  --verbose, -v        Affichage d√©taill√©');
    console.log('  --skip-prereqs       Ignorer la v√©rification des pr√©requis');
    console.log('  --test-only <type>   Ex√©cuter seulement un type de test');
    console.log('                       Types: auth, crud, apis, performance');
    console.log('  --help, -h           Afficher cette aide\n');
    console.log('Exemples:');
    console.log('  node run-supabase-integration-tests.js');
    console.log('  node run-supabase-integration-tests.js --verbose');
    console.log('  node run-supabase-integration-tests.js --test-only auth');
}

// Ex√©cution principale
const isMainModule = import.meta.url === `file://${process.argv[1]}`;

if (isMainModule) {
    const options = parseArguments();

    if (process.argv.includes('--help') || process.argv.includes('-h')) {
        showHelp();
        process.exit(0);
    }

    runAllSupabaseTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('\nüí• Erreur fatale lors des tests:', error);
            console.error('üìö Consultez la documentation ou contactez le support.');
            process.exit(1);
        });
}

export { runAllSupabaseTests };
