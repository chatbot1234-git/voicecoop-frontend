#!/usr/bin/env node

/**
 * Script de Test CRUD Supabase Cloud
 * Teste les op√©rations Create, Read, Update, Delete sur les tables
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: path.join(__dirname, '../.env.local') });

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement Supabase manquantes');
    process.exit(1);
}

// Client Supabase Admin (pour bypasser RLS dans les tests)
const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Test CRUD sur la table user_profiles
 */
async function testUserProfilesCRUD() {
    console.log('üë§ Test CRUD user_profiles...');
    
    const testUserId = `test-user-${Date.now()}`;
    const testData = {
        id: testUserId,
        full_name: 'Test User CRUD',
        bio: 'Utilisateur de test pour CRUD',
        preferences: { theme: 'dark', language: 'fr' },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    };
    
    try {
        // CREATE - Cr√©er un profil utilisateur
        console.log('  üìù CREATE...');
        const { data: createData, error: createError } = await supabase
            .from('user_profiles')
            .insert(testData)
            .select()
            .single();
        
        if (createError) {
            console.error('  ‚ùå Erreur CREATE:', createError.message);
            return false;
        }
        console.log('  ‚úÖ CREATE r√©ussi:', createData.id);
        
        // READ - Lire le profil cr√©√©
        console.log('  üìñ READ...');
        const { data: readData, error: readError } = await supabase
            .from('user_profiles')
            .select('*')
            .eq('id', testUserId)
            .single();
        
        if (readError) {
            console.error('  ‚ùå Erreur READ:', readError.message);
            return false;
        }
        console.log('  ‚úÖ READ r√©ussi:', readData.full_name);
        
        // UPDATE - Mettre √† jour le profil
        console.log('  ‚úèÔ∏è UPDATE...');
        const updatedData = {
            full_name: 'Test User CRUD Updated',
            bio: 'Bio mise √† jour',
            preferences: { theme: 'light', language: 'en' },
            updated_at: new Date().toISOString()
        };
        
        const { data: updateData, error: updateError } = await supabase
            .from('user_profiles')
            .update(updatedData)
            .eq('id', testUserId)
            .select()
            .single();
        
        if (updateError) {
            console.error('  ‚ùå Erreur UPDATE:', updateError.message);
            return false;
        }
        console.log('  ‚úÖ UPDATE r√©ussi:', updateData.full_name);
        
        // DELETE - Supprimer le profil
        console.log('  üóëÔ∏è DELETE...');
        const { error: deleteError } = await supabase
            .from('user_profiles')
            .delete()
            .eq('id', testUserId);
        
        if (deleteError) {
            console.error('  ‚ùå Erreur DELETE:', deleteError.message);
            return false;
        }
        console.log('  ‚úÖ DELETE r√©ussi');
        
        return true;
    } catch (error) {
        console.error('  ‚ùå Erreur CRUD user_profiles:', error.message);
        return false;
    }
}

/**
 * Test CRUD sur la table conversations
 */
async function testConversationsCRUD() {
    console.log('\nüí¨ Test CRUD conversations...');
    
    // Cr√©er d'abord un utilisateur de test
    const testUserId = `conv-user-${Date.now()}`;
    await supabase.from('user_profiles').insert({
        id: testUserId,
        full_name: 'Conversation Test User',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    });
    
    const testConvId = `conv-${Date.now()}`;
    const testData = {
        id: testConvId,
        user_id: testUserId,
        title: 'Test Conversation',
        description: 'Conversation de test pour CRUD',
        is_archived: false,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    };
    
    try {
        // CREATE
        console.log('  üìù CREATE...');
        const { data: createData, error: createError } = await supabase
            .from('conversations')
            .insert(testData)
            .select()
            .single();
        
        if (createError) {
            console.error('  ‚ùå Erreur CREATE:', createError.message);
            return false;
        }
        console.log('  ‚úÖ CREATE r√©ussi:', createData.title);
        
        // READ
        console.log('  üìñ READ...');
        const { data: readData, error: readError } = await supabase
            .from('conversations')
            .select('*')
            .eq('id', testConvId)
            .single();
        
        if (readError) {
            console.error('  ‚ùå Erreur READ:', readError.message);
            return false;
        }
        console.log('  ‚úÖ READ r√©ussi:', readData.title);
        
        // UPDATE
        console.log('  ‚úèÔ∏è UPDATE...');
        const { data: updateData, error: updateError } = await supabase
            .from('conversations')
            .update({
                title: 'Test Conversation Updated',
                description: 'Description mise √† jour',
                updated_at: new Date().toISOString()
            })
            .eq('id', testConvId)
            .select()
            .single();
        
        if (updateError) {
            console.error('  ‚ùå Erreur UPDATE:', updateError.message);
            return false;
        }
        console.log('  ‚úÖ UPDATE r√©ussi:', updateData.title);
        
        // DELETE
        console.log('  üóëÔ∏è DELETE...');
        const { error: deleteError } = await supabase
            .from('conversations')
            .delete()
            .eq('id', testConvId);
        
        if (deleteError) {
            console.error('  ‚ùå Erreur DELETE:', deleteError.message);
            return false;
        }
        console.log('  ‚úÖ DELETE r√©ussi');
        
        // Nettoyer l'utilisateur de test
        await supabase.from('user_profiles').delete().eq('id', testUserId);
        
        return true;
    } catch (error) {
        console.error('  ‚ùå Erreur CRUD conversations:', error.message);
        return false;
    }
}

/**
 * Test CRUD sur la table messages
 */
async function testMessagesCRUD() {
    console.log('\nüì® Test CRUD messages...');
    
    // Cr√©er les donn√©es de test n√©cessaires
    const testUserId = `msg-user-${Date.now()}`;
    const testConvId = `msg-conv-${Date.now()}`;
    
    // Cr√©er utilisateur et conversation de test
    await supabase.from('user_profiles').insert({
        id: testUserId,
        full_name: 'Message Test User',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    });
    
    await supabase.from('conversations').insert({
        id: testConvId,
        user_id: testUserId,
        title: 'Test Conversation for Messages',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    });
    
    const testMsgId = `msg-${Date.now()}`;
    const testData = {
        id: testMsgId,
        conversation_id: testConvId,
        user_id: testUserId,
        content: 'Message de test pour CRUD',
        role: 'user',
        created_at: new Date().toISOString()
    };
    
    try {
        // CREATE
        console.log('  üìù CREATE...');
        const { data: createData, error: createError } = await supabase
            .from('messages')
            .insert(testData)
            .select()
            .single();
        
        if (createError) {
            console.error('  ‚ùå Erreur CREATE:', createError.message);
            return false;
        }
        console.log('  ‚úÖ CREATE r√©ussi:', createData.content.substring(0, 30) + '...');
        
        // READ
        console.log('  üìñ READ...');
        const { data: readData, error: readError } = await supabase
            .from('messages')
            .select('*')
            .eq('id', testMsgId)
            .single();
        
        if (readError) {
            console.error('  ‚ùå Erreur READ:', readError.message);
            return false;
        }
        console.log('  ‚úÖ READ r√©ussi:', readData.role);
        
        // UPDATE
        console.log('  ‚úèÔ∏è UPDATE...');
        const { data: updateData, error: updateError } = await supabase
            .from('messages')
            .update({
                content: 'Message de test mis √† jour',
                role: 'assistant'
            })
            .eq('id', testMsgId)
            .select()
            .single();
        
        if (updateError) {
            console.error('  ‚ùå Erreur UPDATE:', updateError.message);
            return false;
        }
        console.log('  ‚úÖ UPDATE r√©ussi:', updateData.role);
        
        // DELETE
        console.log('  üóëÔ∏è DELETE...');
        const { error: deleteError } = await supabase
            .from('messages')
            .delete()
            .eq('id', testMsgId);
        
        if (deleteError) {
            console.error('  ‚ùå Erreur DELETE:', deleteError.message);
            return false;
        }
        console.log('  ‚úÖ DELETE r√©ussi');
        
        // Nettoyer les donn√©es de test
        await supabase.from('conversations').delete().eq('id', testConvId);
        await supabase.from('user_profiles').delete().eq('id', testUserId);
        
        return true;
    } catch (error) {
        console.error('  ‚ùå Erreur CRUD messages:', error.message);
        return false;
    }
}

/**
 * Test des requ√™tes complexes avec jointures
 */
async function testComplexQueries() {
    console.log('\nüîç Test requ√™tes complexes...');
    
    try {
        // Test jointure conversations + messages
        console.log('  üîó Test jointure conversations + messages...');
        const { data: joinData, error: joinError } = await supabase
            .from('conversations')
            .select(`
                id,
                title,
                user_id,
                messages (
                    id,
                    content,
                    role,
                    created_at
                )
            `)
            .limit(5);
        
        if (joinError) {
            console.error('  ‚ùå Erreur jointure:', joinError.message);
            return false;
        }
        console.log(`  ‚úÖ Jointure r√©ussie: ${joinData.length} conversations r√©cup√©r√©es`);
        
        // Test agr√©gation
        console.log('  üìä Test agr√©gation...');
        const { data: countData, error: countError } = await supabase
            .from('user_profiles')
            .select('*', { count: 'exact', head: true });
        
        if (countError) {
            console.error('  ‚ùå Erreur agr√©gation:', countError.message);
            return false;
        }
        console.log(`  ‚úÖ Agr√©gation r√©ussie: ${countData} utilisateurs`);
        
        // Test filtrage avanc√©
        console.log('  üéØ Test filtrage avanc√©...');
        const { data: filterData, error: filterError } = await supabase
            .from('conversations')
            .select('*')
            .eq('is_archived', false)
            .order('created_at', { ascending: false })
            .limit(10);
        
        if (filterError) {
            console.error('  ‚ùå Erreur filtrage:', filterError.message);
            return false;
        }
        console.log(`  ‚úÖ Filtrage r√©ussi: ${filterData.length} conversations actives`);
        
        return true;
    } catch (error) {
        console.error('  ‚ùå Erreur requ√™tes complexes:', error.message);
        return false;
    }
}

/**
 * Fonction principale de test CRUD
 */
async function runCRUDTests() {
    console.log('üóÑÔ∏è Tests CRUD Supabase Cloud');
    console.log('============================\n');
    
    const results = {
        userProfiles: false,
        conversations: false,
        messages: false,
        complexQueries: false
    };
    
    // Test CRUD user_profiles
    results.userProfiles = await testUserProfilesCRUD();
    
    // Test CRUD conversations
    results.conversations = await testConversationsCRUD();
    
    // Test CRUD messages
    results.messages = await testMessagesCRUD();
    
    // Test requ√™tes complexes
    results.complexQueries = await testComplexQueries();
    
    // Rapport final
    console.log('\nüìä Rapport des Tests CRUD');
    console.log('=========================');
    console.log(`üë§ User Profiles: ${results.userProfiles ? '‚úÖ' : '‚ùå'}`);
    console.log(`üí¨ Conversations: ${results.conversations ? '‚úÖ' : '‚ùå'}`);
    console.log(`üì® Messages: ${results.messages ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîç Requ√™tes Complexes: ${results.complexQueries ? '‚úÖ' : '‚ùå'}`);
    
    const successCount = Object.values(results).filter(Boolean).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`\nüéØ R√©sultat: ${successCount}/${totalTests} tests r√©ussis (${Math.round(successCount/totalTests*100)}%)`);
    
    if (successCount === totalTests) {
        console.log('üéâ Tous les tests CRUD sont r√©ussis !');
        return true;
    } else {
        console.log('‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.');
        return false;
    }
}

// Ex√©cuter les tests si le script est appel√© directement
const isMainModule = import.meta.url === `file://${process.argv[1]}`;

if (isMainModule) {
    runCRUDTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• Erreur fatale:', error);
            process.exit(1);
        });
}

export { runCRUDTests };
